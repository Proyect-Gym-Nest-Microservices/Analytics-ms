generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//- Estadisticas del usuario
model UserStatistics {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  totalUsers    Int // Usuarios Totales
  newUsers      Int // Usuarios nuevos 
  activeUsers   Int // Usuarios que han ingresado en el período
  inactiveUsers Int // Usuarios inactivos
  period        Period // 
  date          DateTime            @default(now())
  genderStats   UserGenderStats[]
  goalStats     UserGoalStats[]
  ageRangeStats UserAgeRangeStats[]

  @@unique([period, date])
  @@index([period])
  @@index([date])
}

model UserGenderStats {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  userStatId String         @db.ObjectId
  userStat   UserStatistics @relation(fields: [userStatId], references: [id])
  gender     Gender
  count      Int            @default(0)

  @@unique([userStatId, gender])
  @@index([userStatId])
}

model UserGoalStats {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  userStatId String         @db.ObjectId
  userStat   UserStatistics @relation(fields: [userStatId], references: [id])
  goal       Goal
  count      Int            @default(0)

  @@unique([userStatId, goal])
  @@index([userStatId])
}

model UserAgeRangeStats {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  userStatId String         @db.ObjectId
  userStat   UserStatistics @relation(fields: [userStatId], references: [id])
  ageRange   AgeRange
  count      Int            @default(0)

  @@unique([userStatId, ageRange])
  @@index([userStatId])
}

//- Estadisticas de los ejercicios

model ExerciseStatistics {
  id              String                    @id @default(auto()) @map("_id") @db.ObjectId
  exerciseId      Int // Referencia al ID del ejercicio
  totalUses       Int                       @default(0)
  popularityScore Float                     @default(0)
  period          Period
  date            DateTime                  @default(now())
  genderStats     ExerciseGenderStats[]
  categoryStats   ExerciseCategoryStats[]
  dificultyStats  ExerciseDifficultyStats[]

  @@unique([exerciseId, period, date])
  @@index([exerciseId])
  @@index([period])
  @@index([date])
}

model ExerciseGenderStats {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  exerciseStatId String             @db.ObjectId
  exerciseStat   ExerciseStatistics @relation(fields: [exerciseStatId], references: [id])
  gender         Gender
  useCount       Int                @default(0)

  @@unique([exerciseStatId, gender])
  @@index([exerciseStatId])
}

model ExerciseCategoryStats {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  exerciseStatId String             @db.ObjectId
  exerciseStat   ExerciseStatistics @relation(fields: [exerciseStatId], references: [id])
  category       Category
  useCount       Int                @default(0)

  @@unique([exerciseStatId, category])
  @@index([exerciseStatId])
}

model ExerciseDifficultyStats {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  exerciseStatId String             @db.ObjectId
  exerciseStat   ExerciseStatistics @relation(fields: [exerciseStatId], references: [id])
  difficulty     Difficulty
  useCount       Int                @default(0)

  @@unique([exerciseStatId, difficulty])
  @@index([exerciseStatId])
}

//- Estadisticas de las Rutinas

model WorkoutStatistics {
  id              String                   @id @default(auto()) @map("_id") @db.ObjectId
  workoutId       Int // Referencia al ID del workout
  popularityScore Float // Puntuación basada en completions y ratings
  period          Period
  date            DateTime                 @default(now())
  genderStats     WorkoutGenderStats[]
  difficultyStats WorkoutDifficultyStats[] // Estadísticas por nivel de dificultad
  categoryStats   WorkoutCategoryStats[] // Estadísticas por categoría
  completionStats WorkoutCompletionStats[]

  @@unique([workoutId, period, date])
  @@index([workoutId])
  @@index([period])
  @@index([date])
}

model WorkoutGenderStats {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  workoutStatId    String            @db.ObjectId
  workoutStat      WorkoutStatistics @relation(fields: [workoutStatId], references: [id])
  gender           Gender
  totalCompletions Int               @default(0) // Número de veces completado por género

  @@unique([workoutStatId, gender])
  @@index([workoutStatId])
}

model WorkoutDifficultyStats {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  workoutStatId    String            @db.ObjectId
  workoutStat      WorkoutStatistics @relation(fields: [workoutStatId], references: [id])
  difficulty       Difficulty
  totalCompletions Int               @default(0) // Número de veces completado por nivel de dificultad

  @@unique([workoutStatId, difficulty])
  @@index([workoutStatId])
}

model WorkoutCategoryStats {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  workoutStatId    String            @db.ObjectId
  workoutStat      WorkoutStatistics @relation(fields: [workoutStatId], references: [id])
  category         Category
  totalCompletions Int               @default(0) // Número de veces completado por categoría

  @@unique([workoutStatId, category])
  @@index([workoutStatId])
}

model WorkoutCompletionStats {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  workoutStatId    String            @db.ObjectId
  workoutStat      WorkoutStatistics @relation(fields: [workoutStatId], references: [id])
  completionStatus CompletionStatus
  count            Int               @default(0)

  @@unique([workoutStatId, completionStatus])
  @@index([workoutStatId])
}

//- Estadisticas para los Equipos
model EquipmentStatistics {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  equipmentId     String                 @db.ObjectId
  totalUses       Int                    @default(0)
  popularityScore Float // Puntuación basada en completions y ratings
  period          Period
  date            DateTime               @default(now())
  genderStats     EquipmentGenderStats[]

  @@unique([period, date])
}

model EquipmentGenderStats {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  equipmentStatisticsId String              @db.ObjectId
  equipmentStat         EquipmentStatistics @relation(fields: [equipmentStatisticsId], references: [id])
  gender                Gender
  useCount              Int                 @default(0)

  @@unique([equipmentStatisticsId, gender])
}

//- Estadisiticas para el Plan de entrenamiento
model TrainingPlanStatistics {
  id                    String                    @id @default(auto()) @map("_id") @db.ObjectId
  trainingPlanId        Int
  totalEnrollments      Int                       @default(0)
  completionRate        Float                     @default(0)
  averageCompletionTime Float                     @default(0)
  abandonmentRate       Float                     @default(0)
  period                Period
  date                  DateTime                  @default(now())
  
  genderStats           TrainingPlanGenderStats[]
  difficultyStats       TrainingPlanDifficultyStats[]

  @@unique([trainingPlanId, period, date])
  @@index([trainingPlanId])
  @@index([period])
  @@index([date])
}

model TrainingPlanGenderStats {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  trainingPlanStatId    String                 @db.ObjectId
  trainingPlanStat      TrainingPlanStatistics @relation(fields: [trainingPlanStatId], references: [id], onDelete: Cascade)
  gender                Gender
  enrollmentCount       Int                    @default(0)
  completionCount       Int                    @default(0)
  averageCompletionTime Float                  @default(0)

  @@unique([trainingPlanStatId, gender])
  @@index([trainingPlanStatId])
}

model TrainingPlanDifficultyStats {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  trainingPlanStatId    String                 @db.ObjectId
  trainingPlanStat      TrainingPlanStatistics @relation(fields: [trainingPlanStatId], references: [id], onDelete: Cascade)
  difficulty            Difficulty
  enrollmentCount       Int                    @default(0)
  completionCount       Int                    @default(0)
  averageCompletionTime Float                  @default(0)

  @@unique([trainingPlanStatId, difficulty])
  @@index([trainingPlanStatId])
}


enum Category {
  CARDIO
  STRENGTH
  FLEXIBILITY
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum AgeRange {
  UNDER_18
  AGE_18_24
  AGE_25_34
  AGE_35_44
  AGE_45_54
  AGE_55_PLUS
}

enum CompletionStatus {
  COMPLETED
  ABANDONED
  IN_PROGRESS
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Goal {
  LOSE_WEIGHT
  GAIN_MUSCLE
  IMPROVE_ENDURANCE
  MAINTAIN
}

enum Difficulty {
  BASIC
  INTERMEDIATE
  ADVANCED
}
